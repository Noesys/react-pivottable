{"version":3,"sources":["src/TableRenderers.jsx"],"names":["spanSize","arr","i","j","x","asc","end","noDraw","len","length","asc1","end1","stop","redColorScaleGenerator","values","min","Math","apply","max","nonRed","round","backgroundColor","makeRenderer","opts","TableRenderer","pivotData","props","colAttrs","cols","rowAttrs","rows","rowKeys","getRowKeys","colKeys","getColKeys","grandTotalAggregator","getAggregator","valueCellColors","rowTotalColors","colTotalColors","heatmapMode","colorScaleGenerator","tableColorScaleGenerator","rowTotalValues","map","value","colTotalValues","allValues","push","r","c","colorScale","v","rowColorScales","rowValues","colColorScales","colValues","fontFamily","fontSize","fontWeight","fontLabelWeight","fontStyle","fontLabelStyle","colKey","rowKey","totalAggregator","getAllMeasures","vals","filter","d","findRow","getIndex","getElement","includes","element","indexOf","txt","aggregator","findCol","merge","fontDataWeight","fontDataStyle","valueFormatter","format","PureComponent","defaultProps","propTypes","func","TSVExportRenderer","headerRow","aggregatorName","join","result","row","unshift","width","window","innerWidth","height","innerHeight","Table"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;AAEA;AACA,IAAMA,WAAW,SAAXA,QAAW,CAAUC,GAAV,EAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AACpC,MAAIC,UAAJ;AACA,MAAIF,MAAM,CAAV,EAAa;AACX,QAAIG,YAAJ;AAAA,QAASC,YAAT;AACA,QAAIC,SAAS,IAAb;AACA,SACEH,IAAI,CAAJ,EAAOE,MAAMH,CAAb,EAAgBE,MAAMC,OAAO,CAD/B,EAEED,MAAMD,KAAKE,GAAX,GAAiBF,KAAKE,GAFxB,EAGED,MAAMD,GAAN,GAAYA,GAHd,EAIE;AACA,UAAIH,IAAIC,IAAI,CAAR,EAAWE,CAAX,MAAkBH,IAAIC,CAAJ,EAAOE,CAAP,CAAtB,EAAiC;AAC/BG,iBAAS,KAAT;AACD;AACF;AACD,QAAIA,MAAJ,EAAY;AACV,aAAO,CAAC,CAAR;AACD;AACF;AACD,MAAIC,MAAM,CAAV;AACA,SAAON,IAAIM,GAAJ,GAAUP,IAAIQ,MAArB,EAA6B;AAC3B,QAAIC,aAAJ;AAAA,QAAUC,aAAV;AACA,QAAIC,OAAO,KAAX;AACA,SACER,IAAI,CAAJ,EAAOO,OAAOR,CAAd,EAAiBO,OAAOC,QAAQ,CADlC,EAEED,OAAON,KAAKO,IAAZ,GAAmBP,KAAKO,IAF1B,EAGED,OAAON,GAAP,GAAaA,GAHf,EAIE;AACA,UAAIH,IAAIC,CAAJ,EAAOE,CAAP,MAAcH,IAAIC,IAAIM,GAAR,EAAaJ,CAAb,CAAlB,EAAmC;AACjCQ,eAAO,IAAP;AACD;AACF;AACD,QAAIA,IAAJ,EAAU;AACR;AACD;AACDJ;AACD;AACD,SAAOA,GAAP;AACD,CArCD;;AAuCA,SAASK,sBAAT,CAAgCC,MAAhC,EAAwC;AACtC,MAAMC,MAAMC,KAAKD,GAAL,CAASE,KAAT,CAAeD,IAAf,EAAqBF,MAArB,CAAZ;AACA,MAAMI,MAAMF,KAAKE,GAAL,CAASD,KAAT,CAAeD,IAAf,EAAqBF,MAArB,CAAZ;AACA,SAAO,aAAK;AACV;AACA,QAAMK,SAAS,MAAMH,KAAKI,KAAL,CAAW,OAAOhB,IAAIW,GAAX,KAAmBG,MAAMH,GAAzB,CAAX,CAArB;AACA,WAAO,EAAEM,8BAA4BF,MAA5B,SAAsCA,MAAtC,MAAF,EAAP;AACD,GAJD;AAKD;;AAED,SAASG,YAAT,GAAiC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;;AAAA,MACzBC,aADyB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAEpB;AACP,YAAMC,YAAY,yBAAc,KAAKC,KAAnB,CAAlB;AACA,YAAMC,WAAWF,UAAUC,KAAV,CAAgBE,IAAjC;AACA,YAAMC,WAAWJ,UAAUC,KAAV,CAAgBI,IAAjC;AACA,YAAMC,UAAUN,UAAUO,UAAV,EAAhB;AACA,YAAMC,UAAUR,UAAUS,UAAV,EAAhB;AACA,YAAMC,uBAAuBV,UAAUW,aAAV,CAAwB,EAAxB,EAA4B,EAA5B,CAA7B;;AAEA,YAAIC,kBAAkB,2BAAM,CAAG,CAA/B;AACA,YAAIC,iBAAiB,0BAAM,CAAG,CAA9B;AACA,YAAIC,iBAAiB,0BAAM,CAAG,CAA9B;AACA,YAAIhB,KAAKiB,WAAT,EAAsB;AACpB,cAAMC,sBAAsB,KAAKf,KAAL,CAAWgB,wBAAvC;AACA,cAAMC,iBAAiBV,QAAQW,GAAR,CAAY;AAAA,mBACjCnB,UAAUW,aAAV,CAAwB,EAAxB,EAA4BhC,CAA5B,EAA+ByC,KAA/B,EADiC;AAAA,WAAZ,CAAvB;AAGAP,2BAAiBG,oBAAoBE,cAApB,CAAjB;AACA,cAAMG,iBAAiBf,QAAQa,GAAR,CAAY;AAAA,mBACjCnB,UAAUW,aAAV,CAAwBhC,CAAxB,EAA2B,EAA3B,EAA+ByC,KAA/B,EADiC;AAAA,WAAZ,CAAvB;AAGAN,2BAAiBE,oBAAoBK,cAApB,CAAjB;;AAEA,cAAIvB,KAAKiB,WAAL,KAAqB,MAAzB,EAAiC;AAC/B,gBAAMO,YAAY,EAAlB;AACAhB,oBAAQa,GAAR,CAAY;AAAA,qBACVX,QAAQW,GAAR,CAAY;AAAA,uBACVG,UAAUC,IAAV,CAAevB,UAAUW,aAAV,CAAwBa,CAAxB,EAA2BC,CAA3B,EAA8BL,KAA9B,EAAf,CADU;AAAA,eAAZ,CADU;AAAA,aAAZ;AAKA,gBAAMM,aAAaV,oBAAoBM,SAApB,CAAnB;AACAV,8BAAkB,yBAACY,CAAD,EAAIC,CAAJ,EAAOE,CAAP;AAAA,qBAAaD,WAAWC,CAAX,CAAb;AAAA,aAAlB;AACD,WATD,MASO,IAAI7B,KAAKiB,WAAL,KAAqB,KAAzB,EAAgC;AACrC,gBAAMa,iBAAiB,EAAvB;AACAtB,oBAAQa,GAAR,CAAY,aAAK;AACf,kBAAMU,YAAYrB,QAAQW,GAAR,CAAY;AAAA,uBAC5BnB,UAAUW,aAAV,CAAwBa,CAAxB,EAA2B7C,CAA3B,EAA8ByC,KAA9B,EAD4B;AAAA,eAAZ,CAAlB;AAGAQ,6BAAeJ,CAAf,IAAoBR,oBAAoBa,SAApB,CAApB;AACD,aALD;AAMAjB,8BAAkB,yBAACY,CAAD,EAAIC,CAAJ,EAAOE,CAAP;AAAA,qBAAaC,eAAeJ,CAAf,EAAkBG,CAAlB,CAAb;AAAA,aAAlB;AACD,WATM,MASA,IAAI7B,KAAKiB,WAAL,KAAqB,KAAzB,EAAgC;AACrC,gBAAMe,iBAAiB,EAAvB;AACAtB,oBAAQW,GAAR,CAAY,aAAK;AACf,kBAAMY,YAAYzB,QAAQa,GAAR,CAAY;AAAA,uBAC5BnB,UAAUW,aAAV,CAAwBhC,CAAxB,EAA2B8C,CAA3B,EAA8BL,KAA9B,EAD4B;AAAA,eAAZ,CAAlB;AAGAU,6BAAeL,CAAf,IAAoBT,oBAAoBe,SAApB,CAApB;AACD,aALD;AAMAnB,8BAAkB,yBAACY,CAAD,EAAIC,CAAJ,EAAOE,CAAP;AAAA,qBAAaG,eAAeL,CAAf,EAAkBE,CAAlB,CAAb;AAAA,aAAlB;AACD;AACF;;AAED,eACE;AAAA;AAAA,YAAO,WAAU,UAAjB;AACE,mBAAO;AACLK,0BAAYhC,UAAUC,KAAV,CAAgB+B,UADvB,EACmCC,UAAUjC,UAAUC,KAAV,CAAgBgC,QAAhB,GAA2B;AADxE,aADT;AAIE;AAAA;AAAA;AACG/B,qBAASiB,GAAT,CAAa,UAAUM,CAAV,EAAa/C,CAAb,EAAgB;AAC5B,qBACE;AAAA;AAAA,kBAAI,iBAAeA,CAAnB;AACGA,sBAAM,CAAN,IACC0B,SAASpB,MAAT,KAAoB,CADrB,IAEG,sCAAI,OAAO,EAAEY,iBAAiBI,UAAUC,KAAV,CAAgBL,eAAnC,EAAX,EAAiE,SAASQ,SAASpB,MAAnF,EAA2F,SAASkB,SAASlB,MAA7G,GAHN;AAKE;AAAA;AAAA,oBAAI,WAAU,cAAd,EAA6B,OAAO;AAClCY,uCAAiBI,UAAUC,KAAV,CAAgBL,eADC,EACgBqC,UAAUjC,UAAUC,KAAV,CAAgBgC,QAAhB,GAA2B,IADrD;AAElCC,kCAAYlC,UAAUC,KAAV,CAAgBkC,eAFM,EAEWC,WAAWpC,UAAUC,KAAV,CAAgBoC;AAFtC,qBAApC;AAGIZ;AAHJ,iBALF;AASGjB,wBAAQW,GAAR,CAAY,UAAUmB,MAAV,EAAkB7D,CAAlB,EAAqB;AAChC,sBAAME,IAAIJ,SAASiC,OAAT,EAAkB/B,CAAlB,EAAqBC,CAArB,CAAV;AACA,sBAAIC,MAAM,CAAC,CAAX,EAAc;AACZ,2BAAO,IAAP;AACD;AACD,yBACE;AAAA;AAAA;AACE,iCAAU,aADZ;AAEE,6BAAO;AACLiB,yCAAiBI,UAAUC,KAAV,CAAgBL,eAD5B,EAC6CqC,UAAUjC,UAAUC,KAAV,CAAgBgC,QAAhB,GAA2B,IADlF;AAELC,oCAAYlC,UAAUC,KAAV,CAAgBkC,eAFvB,EAEwCC,WAAWpC,UAAUC,KAAV,CAAgBoC;AAFnE,uBAFT;AAME,sCAAc5D,CANhB;AAOE,+BAASE,CAPX;AAQE,+BACED,MAAMwB,SAASlB,MAAT,GAAkB,CAAxB,IAA6BoB,SAASpB,MAAT,KAAoB,CAAjD,GACI,CADJ,GAEI;AAXR;AAcGsD,2BAAO5D,CAAP;AAdH,mBADF;AAkBD,iBAvBA,CATH;AAkCGA,sBAAM,CAAN,IACC;AAAA;AAAA;AACE,+BAAU,eADZ;AAEE,2BAAO;AACLkB,uCAAiBI,UAAUC,KAAV,CAAgBL,eAD5B,EAC6CqC,UAAUjC,UAAUC,KAAV,CAAgBgC,QAAhB,GAA2B,IADlF;AAELC,kCAAYlC,UAAUC,KAAV,CAAgBkC,eAFvB,EAEwCC,WAAWpC,UAAUC,KAAV,CAAgBoC;AAFnE,qBAFT;AAME,6BACEnC,SAASlB,MAAT,IAAmBoB,SAASpB,MAAT,KAAoB,CAApB,GAAwB,CAAxB,GAA4B,CAA/C;AAPJ;AAAA;AAAA;AAnCJ,eADF;AAmDD,aApDA,CADH;AAuDGoB,qBAASpB,MAAT,KAAoB,CAApB,IACC;AAAA;AAAA;AACGoB,uBAASe,GAAT,CAAa,UAAUK,CAAV,EAAa/C,CAAb,EAAgB;AAC5B,uBACE;AAAA;AAAA,oBAAI,WAAU,cAAd,EAA6B,iBAAeA,CAA5C,EAAiD,OAAO;AACtDmB,uCAAiBI,UAAUC,KAAV,CAAgBL,eADqB,EACJqC,UAAUjC,UAAUC,KAAV,CAAgBgC,QAAhB,GAA2B,IADjC;AAEtDC,kCAAYlC,UAAUC,KAAV,CAAgBkC,eAF0B,EAETC,WAAWpC,UAAUC,KAAV,CAAgBoC;AAFlB,qBAAxD;AAIGb;AAJH,iBADF;AAQD,eATA,CADH;AAWE;AAAA;AAAA,kBAAI,WAAU,eAAd;AACE,yBAAO;AACL5B,qCAAiBI,UAAUC,KAAV,CAAgBL,eAD5B,EAC6CqC,UAAUjC,UAAUC,KAAV,CAAgBgC,QAAhB,GAA2B,IADlF;AAELC,gCAAYlC,UAAUC,KAAV,CAAgBkC,eAFvB,EAEwCC,WAAWpC,UAAUC,KAAV,CAAgBoC;AAFnE,mBADT;AAKGnC,yBAASlB,MAAT,KAAoB,CAApB,GAAwB,QAAxB,GAAmC;AALtC;AAXF;AAxDJ,WAJF;AAkFE;AAAA;AAAA;AACGsB,oBAAQa,GAAR,CAAY,UAAUoB,MAAV,EAAkB9D,CAAlB,EAAqB;AAChC,kBAAM+D,kBAAkBxC,UAAUW,aAAV,CAAwB4B,MAAxB,EAAgC,EAAhC,CAAxB;AACA;AACA,kBAAIE,iBAAiBzC,UAAUC,KAAV,CAAgByC,IAAhB,CAAqBC,MAArB,CAA4B;AAAA,uBAAKC,KAAK,YAAV;AAAA,eAA5B,CAArB;AACA,kBAAIC,UAAU7C,UAAUC,KAAV,CAAgBI,IAAhB,CAAqBsC,MAArB,CAA4B;AAAA,uBAAKC,MAAM,SAAX;AAAA,eAA5B,CAAd;AACA,kBAAIE,WAAW,CAAf;AACA,kBAAID,QAAQ7D,MAAR,GAAiB,CAArB,EAAwB;AACtB,oBAAI+D,aAAaN,eAAeE,MAAf,CAAsB;AAAA,yBAAWJ,OAAOS,QAAP,CAAgBC,OAAhB,CAAX;AAAA,iBAAtB,CAAjB;AACA,oBAAIF,WAAW/D,MAAX,GAAoB,CAAxB,EAA2B;AACzB8D,6BAAYL,eAAeS,OAAf,CAAuBH,WAAW,CAAX,CAAvB,IAAwC,CAAzC,GAA8C,CAA9C,GAAkDN,eAAeS,OAAf,CAAuBH,WAAW,CAAX,CAAvB,CAA7D;AACD;AACF;AACD,qBACE;AAAA;AAAA,kBAAI,mBAAiBtE,CAArB;AACG8D,uBAAOpB,GAAP,CAAW,UAAUgC,GAAV,EAAezE,CAAf,EAAkB;AAC5B,sBAAMC,IAAIJ,SAAS+B,OAAT,EAAkB7B,CAAlB,EAAqBC,CAArB,CAAV;AACA,sBAAIC,MAAM,CAAC,CAAX,EAAc;AACZ,2BAAO,IAAP;AACD;AACD,yBACE;AAAA;AAAA;AACE,2CAAmBF,CAAnB,SAAwBC,CAD1B;AAEE,iCAAU,aAFZ;AAGE,6BAAO;AACLkB,yCAAiBI,UAAUC,KAAV,CAAgBL,eAD5B,EAC6CqC,UAAUjC,UAAUC,KAAV,CAAgBgC,QAAhB,GAA2B,IADlF;AAELC,oCAAYlC,UAAUC,KAAV,CAAgBkC,eAFvB,EAEwCC,WAAWpC,UAAUC,KAAV,CAAgBoC;AAFnE,uBAHT;AAOE,+BAAS1D,CAPX;AAQE,+BACED,MAAM0B,SAASpB,MAAT,GAAkB,CAAxB,IAA6BkB,SAASlB,MAAT,KAAoB,CAAjD,GACI,CADJ,GAEI;AAXR;AAcGmE;AAdH,mBADF;AAkBD,iBAvBA,CADH;AAyBG3C,wBAAQW,GAAR,CAAY,UAAUmB,MAAV,EAAkB5D,CAAlB,EAAqB;AAChC,sBAAM0E,aAAapD,UAAUW,aAAV,CAAwB4B,MAAxB,EAAgCD,MAAhC,CAAnB;AACA;AACA,sBAAIG,iBAAiBzC,UAAUC,KAAV,CAAgByC,IAAhB,CAAqBC,MAArB,CAA4B;AAAA,2BAAKC,KAAK,YAAV;AAAA,mBAA5B,CAArB;AACA,sBAAIS,UAAUrD,UAAUC,KAAV,CAAgBE,IAAhB,CAAqBwC,MAArB,CAA4B;AAAA,2BAAKC,MAAM,SAAX;AAAA,mBAA5B,CAAd;AACA,sBAAIC,UAAU7C,UAAUC,KAAV,CAAgBI,IAAhB,CAAqBsC,MAArB,CAA4B;AAAA,2BAAKC,MAAM,SAAX;AAAA,mBAA5B,CAAd;AACA,sBAAIE,WAAW,CAAf;AACA,sBAAIO,QAAQrE,MAAR,GAAiB,CAArB,EAAwB;AACtB,wBAAI+D,cAAaN,eAAeE,MAAf,CAAsB;AAAA,6BAAWL,OAAOU,QAAP,CAAgBC,OAAhB,CAAX;AAAA,qBAAtB,CAAjB;AACA,wBAAIF,YAAW/D,MAAX,GAAoB,CAAxB,EAA2B;AACzB8D,iCAAYL,eAAeS,OAAf,CAAuBH,YAAW,CAAX,CAAvB,IAAwC,CAAzC,GAA8C,CAA9C,GAAkDN,eAAeS,OAAf,CAAuBH,YAAW,CAAX,CAAvB,CAA7D;AACD;AACF,mBALD,MAKO,IAAIF,QAAQ7D,MAAR,GAAiB,CAArB,EAAwB;AAC7B,wBAAI+D,eAAaN,eAAeE,MAAf,CAAsB;AAAA,6BAAWJ,OAAOS,QAAP,CAAgBC,OAAhB,CAAX;AAAA,qBAAtB,CAAjB;AACA,wBAAIF,aAAW/D,MAAX,GAAoB,CAAxB,EAA2B;AACzB8D,iCAAYL,eAAeS,OAAf,CAAuBH,aAAW,CAAX,CAAvB,IAAwC,CAAzC,GAA8C,CAA9C,GAAkDN,eAAeS,OAAf,CAAuBH,aAAW,CAAX,CAAvB,CAA7D;AACD;AACF;AACD,yBACE;AAAA;AAAA;AACE,iCAAU,QADZ;AAEE,sCAActE,CAAd,SAAmBC,CAFrB;AAGE,6BAAO,iBAAE4E,KAAF,CAAQ1C,gBAAgB2B,MAAhB,EAAwBD,MAAxB,EAAgCc,WAAWhC,KAAX,EAAhC,CAAR,EACL,EAAEc,YAAYlC,UAAUC,KAAV,CAAgBsD,cAA9B,EADK,EAC2C,EAAEnB,WAAWpC,UAAUC,KAAV,CAAgBuD,aAA7B,EAD3C;AAHT;AAMIxD,8BAAUC,KAAV,CAAgBwD,cAAhB,IAAkC,IAAnC,GACCzD,UAAUC,KAAV,CAAgBwD,cAAhB,CAA+BX,QAA/B,EAAyCM,WAAWhC,KAAX,EAAzC,CADD,GAECgC,WAAWM,MAAX,CAAkBN,WAAWhC,KAAX,EAAlB;AARJ,mBADF;AAaD,iBA/BA,CAzBH;AAyDE;AAAA;AAAA;AACE,+BAAU,UADZ;AAEE,2BAAO,iBAAEkC,KAAF,CAAQxC,eAAe0B,gBAAgBpB,KAAhB,EAAf,CAAR,EACL,EAAEc,YAAYlC,UAAUC,KAAV,CAAgBsD,cAA9B,EADK,EAC2C,EAAEnB,WAAWpC,UAAUC,KAAV,CAAgBuD,aAA7B,EAD3C;AAFT;AAKIxD,4BAAUC,KAAV,CAAgBwD,cAAhB,IAAkC,IAAlC,IAA0CZ,QAAQ7D,MAAR,GAAiB,CAA5D,GACCgB,UAAUC,KAAV,CAAgBwD,cAAhB,CAA+BX,QAA/B,EAAyCN,gBAAgBpB,KAAhB,EAAzC,CADD,GAECoB,gBAAgBkB,MAAhB,CAAuBlB,gBAAgBpB,KAAhB,EAAvB;AAPJ;AAzDF,eADF;AAsED,aAlFA,CADH;AAqFE;AAAA;AAAA;AACE;AAAA;AAAA;AACE,yBAAO;AACLxB,qCAAiBI,UAAUC,KAAV,CAAgBL,eAD5B,EAC6CqC,UAAUjC,UAAUC,KAAV,CAAgBgC,QAAhB,GAA2B,IADlF;AAELC,gCAAYlC,UAAUC,KAAV,CAAgBkC,eAFvB,EAEwCC,WAAWpC,UAAUC,KAAV,CAAgBoC;AAFnE,mBADT;AAKE,6BAAU,eALZ;AAME,2BAASjC,SAASpB,MAAT,IAAmBkB,SAASlB,MAAT,KAAoB,CAApB,GAAwB,CAAxB,GAA4B,CAA/C;AANX;AAAA;AAAA,eADF;AAYGwB,sBAAQW,GAAR,CAAY,UAAUmB,MAAV,EAAkB7D,CAAlB,EAAqB;AAChC,oBAAM+D,kBAAkBxC,UAAUW,aAAV,CAAwB,EAAxB,EAA4B2B,MAA5B,CAAxB;AACA;AACA,oBAAIG,iBAAiBzC,UAAUC,KAAV,CAAgByC,IAAhB,CAAqBC,MAArB,CAA4B;AAAA,yBAAKC,KAAK,YAAV;AAAA,iBAA5B,CAArB;AACA,oBAAIS,UAAUrD,UAAUC,KAAV,CAAgBE,IAAhB,CAAqBwC,MAArB,CAA4B;AAAA,yBAAKC,MAAM,SAAX;AAAA,iBAA5B,CAAd;AACA,oBAAIE,WAAW,CAAf;AACA,oBAAIO,QAAQrE,MAAR,GAAiB,CAArB,EAAwB;AACtB,sBAAI+D,aAAaN,eAAeE,MAAf,CAAsB;AAAA,2BAAWL,OAAOU,QAAP,CAAgBC,OAAhB,CAAX;AAAA,mBAAtB,CAAjB;AACA,sBAAIF,WAAW/D,MAAX,GAAoB,CAAxB,EAA2B;AACzB8D,+BAAYL,eAAeS,OAAf,CAAuBH,WAAW,CAAX,CAAvB,IAAwC,CAAzC,GAA8C,CAA9C,GAAkDN,eAAeS,OAAf,CAAuBH,WAAW,CAAX,CAAvB,CAA7D;AACD;AACF;AACD,uBACE;AAAA;AAAA;AACE,+BAAU,UADZ;AAEE,mCAAatE,CAFf;AAGE,2BAAO,iBAAE6E,KAAF,CAAQzC,eAAe2B,gBAAgBpB,KAAhB,EAAf,CAAR,EAAiD,EAACc,YAAYlC,UAAUC,KAAV,CAAgBsD,cAA7B,EAAjD,EAA+F,EAACnB,WAAWpC,UAAUC,KAAV,CAAgBuD,aAA5B,EAA/F;AAHT;AAKIxD,4BAAUC,KAAV,CAAgBwD,cAAhB,IAAkC,IAAlC,IAA0CJ,QAAQrE,MAAR,GAAiB,CAA5D,GACCgB,UAAUC,KAAV,CAAgBwD,cAAhB,CAA+BX,QAA/B,EAAyCN,gBAAgBpB,KAAhB,EAAzC,CADD,GAECoB,gBAAgBkB,MAAhB,CAAuBlB,gBAAgBpB,KAAhB,EAAvB;AAPJ,iBADF;AAYD,eAxBA,CAZH;AAsCE;AAAA;AAAA,kBAAI,WAAU,eAAd,EAA8B,OAAO,EAAEc,YAAYlC,UAAUC,KAAV,CAAgBsD,cAA9B,EAA8CnB,WAAWpC,UAAUC,KAAV,CAAgBuD,aAAzE,EAArC;AACG9C,qCAAqBgD,MAArB,CAA4BhD,qBAAqBU,KAArB,EAA5B;AADH;AAtCF;AArFF;AAlFF,SADF;AAqND;AA3Q4B;;AAAA;AAAA,IACH,gBAAMuC,aADH;;AA8Q/B5D,gBAAc6D,YAAd,GAA6B,qBAAUA,YAAvC;AACA7D,gBAAc8D,SAAd,GAA0B,qBAAUA,SAApC;AACA9D,gBAAc6D,YAAd,CAA2B3C,wBAA3B,GAAsD7B,sBAAtD;AACAW,gBAAc8D,SAAd,CAAwB5C,wBAAxB,GAAmD,oBAAU6C,IAA7D;AACA,SAAO/D,aAAP;AACD;;IAEKgE,iB;;;;;;;;;;;6BACK;AACP,UAAM/D,YAAY,yBAAc,KAAKC,KAAnB,CAAlB;AACA,UAAMK,UAAUN,UAAUO,UAAV,EAAhB;AACA,UAAMC,UAAUR,UAAUS,UAAV,EAAhB;AACA,UAAIH,QAAQtB,MAAR,KAAmB,CAAvB,EAA0B;AACxBsB,gBAAQiB,IAAR,CAAa,EAAb;AACD;AACD,UAAIf,QAAQxB,MAAR,KAAmB,CAAvB,EAA0B;AACxBwB,gBAAQe,IAAR,CAAa,EAAb;AACD;;AAED,UAAMyC,YAAYhE,UAAUC,KAAV,CAAgBI,IAAhB,CAAqBc,GAArB,CAAyB;AAAA,eAAKK,CAAL;AAAA,OAAzB,CAAlB;AACA,UAAIhB,QAAQxB,MAAR,KAAmB,CAAnB,IAAwBwB,QAAQ,CAAR,EAAWxB,MAAX,KAAsB,CAAlD,EAAqD;AACnDgF,kBAAUzC,IAAV,CAAe,KAAKtB,KAAL,CAAWgE,cAA1B;AACD,OAFD,MAEO;AACLzD,gBAAQW,GAAR,CAAY;AAAA,iBAAK6C,UAAUzC,IAAV,CAAeE,EAAEyC,IAAF,CAAO,GAAP,CAAf,CAAL;AAAA,SAAZ;AACD;;AAED,UAAMC,SAAS7D,QAAQa,GAAR,CAAY,aAAK;AAC9B,YAAMiD,MAAM5C,EAAEL,GAAF,CAAM;AAAA,iBAAKxC,CAAL;AAAA,SAAN,CAAZ;AACA6B,gBAAQW,GAAR,CAAY,aAAK;AACf,cAAMQ,IAAI3B,UAAUW,aAAV,CAAwBa,CAAxB,EAA2BC,CAA3B,EAA8BL,KAA9B,EAAV;AACAgD,cAAI7C,IAAJ,CAASI,IAAIA,CAAJ,GAAQ,EAAjB;AACD,SAHD;AAIA,eAAOyC,GAAP;AACD,OAPc,CAAf;;AASAD,aAAOE,OAAP,CAAeL,SAAf;;AAEA,aACE;AACE,eAAOG,OAAOhD,GAAP,CAAW;AAAA,iBAAKK,EAAE0C,IAAF,CAAO,IAAP,CAAL;AAAA,SAAX,EAA8BA,IAA9B,CAAmC,IAAnC,CADT;AAEE,eAAO,EAAEI,OAAOC,OAAOC,UAAP,GAAoB,CAA7B,EAAgCC,QAAQF,OAAOG,WAAP,GAAqB,CAA7D,EAFT;AAGE,kBAAU;AAHZ,QADF;AAOD;;;;EArC6B,gBAAMf,a;;AAwCtCI,kBAAkBH,YAAlB,GAAiC,qBAAUA,YAA3C;AACAG,kBAAkBF,SAAlB,GAA8B,qBAAUA,SAAxC;;kBAEe;AACbc,SAAO9E,cADM;AAEb,mBAAiBA,aAAa,EAAEkB,aAAa,MAAf,EAAb,CAFJ;AAGb,uBAAqBlB,aAAa,EAAEkB,aAAa,KAAf,EAAb,CAHR;AAIb,uBAAqBlB,aAAa,EAAEkB,aAAa,KAAf,EAAb,CAJR;AAKb,oBAAkBgD;AALL,C","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PivotData } from './Utilities';\nimport _ from 'lodash';\n\n// helper function for setting row/col-span in pivotTableRenderer\nconst spanSize = function (arr, i, j) {\n  let x;\n  if (i !== 0) {\n    let asc, end;\n    let noDraw = true;\n    for (\n      x = 0, end = j, asc = end >= 0;\n      asc ? x <= end : x >= end;\n      asc ? x++ : x--\n    ) {\n      if (arr[i - 1][x] !== arr[i][x]) {\n        noDraw = false;\n      }\n    }\n    if (noDraw) {\n      return -1;\n    }\n  }\n  let len = 0;\n  while (i + len < arr.length) {\n    let asc1, end1;\n    let stop = false;\n    for (\n      x = 0, end1 = j, asc1 = end1 >= 0;\n      asc1 ? x <= end1 : x >= end1;\n      asc1 ? x++ : x--\n    ) {\n      if (arr[i][x] !== arr[i + len][x]) {\n        stop = true;\n      }\n    }\n    if (stop) {\n      break;\n    }\n    len++;\n  }\n  return len;\n};\n\nfunction redColorScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  return x => {\n    // eslint-disable-next-line no-magic-numbers\n    const nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n    return { backgroundColor: `rgb(255,${nonRed},${nonRed})` };\n  };\n}\n\nfunction makeRenderer(opts = {}) {\n  class TableRenderer extends React.PureComponent {\n    render() {\n      const pivotData = new PivotData(this.props);\n      const colAttrs = pivotData.props.cols;\n      const rowAttrs = pivotData.props.rows;\n      const rowKeys = pivotData.getRowKeys();\n      const colKeys = pivotData.getColKeys();\n      const grandTotalAggregator = pivotData.getAggregator([], []);\n\n      let valueCellColors = () => { };\n      let rowTotalColors = () => { };\n      let colTotalColors = () => { };\n      if (opts.heatmapMode) {\n        const colorScaleGenerator = this.props.tableColorScaleGenerator;\n        const rowTotalValues = colKeys.map(x =>\n          pivotData.getAggregator([], x).value()\n        );\n        rowTotalColors = colorScaleGenerator(rowTotalValues);\n        const colTotalValues = rowKeys.map(x =>\n          pivotData.getAggregator(x, []).value()\n        );\n        colTotalColors = colorScaleGenerator(colTotalValues);\n\n        if (opts.heatmapMode === 'full') {\n          const allValues = [];\n          rowKeys.map(r =>\n            colKeys.map(c =>\n              allValues.push(pivotData.getAggregator(r, c).value())\n            )\n          );\n          const colorScale = colorScaleGenerator(allValues);\n          valueCellColors = (r, c, v) => colorScale(v);\n        } else if (opts.heatmapMode === 'row') {\n          const rowColorScales = {};\n          rowKeys.map(r => {\n            const rowValues = colKeys.map(x =>\n              pivotData.getAggregator(r, x).value()\n            );\n            rowColorScales[r] = colorScaleGenerator(rowValues);\n          });\n          valueCellColors = (r, c, v) => rowColorScales[r](v);\n        } else if (opts.heatmapMode === 'col') {\n          const colColorScales = {};\n          colKeys.map(c => {\n            const colValues = rowKeys.map(x =>\n              pivotData.getAggregator(x, c).value()\n            );\n            colColorScales[c] = colorScaleGenerator(colValues);\n          });\n          valueCellColors = (r, c, v) => colColorScales[c](v);\n        }\n      }\n\n      return (\n        <table className=\"pvtTable\"\n          style={{\n            fontFamily: pivotData.props.fontFamily, fontSize: pivotData.props.fontSize + \"pt\"\n          }}>\n          <thead>\n            {colAttrs.map(function (c, j) {\n              return (\n                <tr key={`colAttr${j}`}>\n                  {j === 0 &&\n                    rowAttrs.length !== 0 && (\n                      <th style={{ backgroundColor: pivotData.props.backgroundColor }} colSpan={rowAttrs.length} rowSpan={colAttrs.length} />\n                    )}\n                  <th className=\"pvtAxisLabel\" style={{\n                    backgroundColor: pivotData.props.backgroundColor, fontSize: pivotData.props.fontSize + \"pt\",\n                    fontWeight: pivotData.props.fontLabelWeight, fontStyle: pivotData.props.fontLabelStyle\n                  }}>{c}</th>\n                  {colKeys.map(function (colKey, i) {\n                    const x = spanSize(colKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        className=\"pvtColLabel\"\n                        style={{\n                          backgroundColor: pivotData.props.backgroundColor, fontSize: pivotData.props.fontSize + \"pt\",\n                          fontWeight: pivotData.props.fontLabelWeight, fontStyle: pivotData.props.fontLabelStyle\n                        }}\n                        key={`colKey${i}`}\n                        colSpan={x}\n                        rowSpan={\n                          j === colAttrs.length - 1 && rowAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {colKey[j]}\n                      </th>\n                    );\n                  })}\n\n                  {j === 0 && (\n                    <th\n                      className=\"pvtTotalLabel\"\n                      style={{\n                        backgroundColor: pivotData.props.backgroundColor, fontSize: pivotData.props.fontSize + \"pt\",\n                        fontWeight: pivotData.props.fontLabelWeight, fontStyle: pivotData.props.fontLabelStyle\n                      }}\n                      rowSpan={\n                        colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\n                      }\n                    >\n                      Totals\n                    </th>\n                  )}\n                </tr>\n              );\n            })}\n\n            {rowAttrs.length !== 0 && (\n              <tr>\n                {rowAttrs.map(function (r, i) {\n                  return (\n                    <th className=\"pvtAxisLabel\" key={`rowAttr${i}`} style={{\n                      backgroundColor: pivotData.props.backgroundColor, fontSize: pivotData.props.fontSize + \"pt\",\n                      fontWeight: pivotData.props.fontLabelWeight, fontStyle: pivotData.props.fontLabelStyle\n                    }}>\n                      {r}\n                    </th>\n                  );\n                })}\n                <th className=\"pvtTotalLabel\"\n                  style={{\n                    backgroundColor: pivotData.props.backgroundColor, fontSize: pivotData.props.fontSize + \"pt\",\n                    fontWeight: pivotData.props.fontLabelWeight, fontStyle: pivotData.props.fontLabelStyle\n                  }}>\n                  {colAttrs.length === 0 ? 'Totals' : null}\n                </th>\n              </tr>\n            )}\n          </thead>\n\n          <tbody>\n            {rowKeys.map(function (rowKey, i) {\n              const totalAggregator = pivotData.getAggregator(rowKey, []);\n              // To find Index of Measure\n              let getAllMeasures = pivotData.props.vals.filter(d => d != \"MeasureVal\");\n              let findRow = pivotData.props.rows.filter(d => d === \"Measure\");\n              let getIndex = 0;\n              if (findRow.length > 0) {\n                let getElement = getAllMeasures.filter(element => rowKey.includes(element));\n                if (getElement.length > 0) {\n                  getIndex = (getAllMeasures.indexOf(getElement[0]) < 0) ? 0 : getAllMeasures.indexOf(getElement[0]);\n                }\n              }\n              return (\n                <tr key={`rowKeyRow${i}`}>\n                  {rowKey.map(function (txt, j) {\n                    const x = spanSize(rowKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        key={`rowKeyLabel${i}-${j}`}\n                        className=\"pvtRowLabel\"\n                        style={{\n                          backgroundColor: pivotData.props.backgroundColor, fontSize: pivotData.props.fontSize + \"pt\",\n                          fontWeight: pivotData.props.fontLabelWeight, fontStyle: pivotData.props.fontLabelStyle\n                        }}\n                        rowSpan={x}\n                        colSpan={\n                          j === rowAttrs.length - 1 && colAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {txt}\n                      </th>\n                    );\n                  })}\n                  {colKeys.map(function (colKey, j) {\n                    const aggregator = pivotData.getAggregator(rowKey, colKey);\n                    // To find Index of Measure\n                    let getAllMeasures = pivotData.props.vals.filter(d => d != \"MeasureVal\");\n                    let findCol = pivotData.props.cols.filter(d => d === \"Measure\");\n                    let findRow = pivotData.props.rows.filter(d => d === \"Measure\");\n                    let getIndex = 0;\n                    if (findCol.length > 0) {\n                      let getElement = getAllMeasures.filter(element => colKey.includes(element));\n                      if (getElement.length > 0) {\n                        getIndex = (getAllMeasures.indexOf(getElement[0]) < 0) ? 0 : getAllMeasures.indexOf(getElement[0]);\n                      }\n                    } else if (findRow.length > 0) {\n                      let getElement = getAllMeasures.filter(element => rowKey.includes(element));\n                      if (getElement.length > 0) {\n                        getIndex = (getAllMeasures.indexOf(getElement[0]) < 0) ? 0 : getAllMeasures.indexOf(getElement[0]);\n                      }\n                    }\n                    return (\n                      <td\n                        className=\"pvtVal\"\n                        key={`pvtVal${i}-${j}`}\n                        style={_.merge(valueCellColors(rowKey, colKey, aggregator.value()),\n                          { fontWeight: pivotData.props.fontDataWeight }, { fontStyle: pivotData.props.fontDataStyle })}\n                      >\n                        {(pivotData.props.valueFormatter != null) ?\n                          pivotData.props.valueFormatter[getIndex](aggregator.value()) :\n                          aggregator.format(aggregator.value())\n                        }\n                      </td>\n                    );\n                  })}\n                  <td\n                    className=\"pvtTotal\"\n                    style={_.merge(colTotalColors(totalAggregator.value()),\n                      { fontWeight: pivotData.props.fontDataWeight }, { fontStyle: pivotData.props.fontDataStyle })}\n                  >\n                    {(pivotData.props.valueFormatter != null && findRow.length > 0) ?\n                      pivotData.props.valueFormatter[getIndex](totalAggregator.value()) :\n                      totalAggregator.format(totalAggregator.value())\n                    }\n                  </td>\n                </tr>\n              );\n            })}\n\n            <tr>\n              <th\n                style={{\n                  backgroundColor: pivotData.props.backgroundColor, fontSize: pivotData.props.fontSize + \"pt\",\n                  fontWeight: pivotData.props.fontLabelWeight, fontStyle: pivotData.props.fontLabelStyle\n                }}\n                className=\"pvtTotalLabel\"\n                colSpan={rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)}\n              >\n                Totals\n              </th>\n\n              {colKeys.map(function (colKey, i) {\n                const totalAggregator = pivotData.getAggregator([], colKey);\n                // To find Index of Measure\n                let getAllMeasures = pivotData.props.vals.filter(d => d != \"MeasureVal\");\n                let findCol = pivotData.props.cols.filter(d => d === \"Measure\");\n                let getIndex = 0;\n                if (findCol.length > 0) {\n                  let getElement = getAllMeasures.filter(element => colKey.includes(element));\n                  if (getElement.length > 0) {\n                    getIndex = (getAllMeasures.indexOf(getElement[0]) < 0) ? 0 : getAllMeasures.indexOf(getElement[0]);\n                  }\n                }\n                return (\n                  <td\n                    className=\"pvtTotal\"\n                    key={`total${i}`}\n                    style={_.merge(rowTotalColors(totalAggregator.value()), {fontWeight: pivotData.props.fontDataWeight}, {fontStyle: pivotData.props.fontDataStyle})}\n                  >\n                    {(pivotData.props.valueFormatter != null && findCol.length > 0) ?\n                      pivotData.props.valueFormatter[getIndex](totalAggregator.value()) :\n                      totalAggregator.format(totalAggregator.value())\n                    }\n                  </td>\n                );\n              })}\n\n              <td className=\"pvtGrandTotal\" style={{ fontWeight: pivotData.props.fontDataWeight, fontStyle: pivotData.props.fontDataStyle }}>\n                {grandTotalAggregator.format(grandTotalAggregator.value())}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      );\n    }\n  }\n\n  TableRenderer.defaultProps = PivotData.defaultProps;\n  TableRenderer.propTypes = PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\n  return TableRenderer;\n}\n\nclass TSVExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n    if (rowKeys.length === 0) {\n      rowKeys.push([]);\n    }\n    if (colKeys.length === 0) {\n      colKeys.push([]);\n    }\n\n    const headerRow = pivotData.props.rows.map(r => r);\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\n      headerRow.push(this.props.aggregatorName);\n    } else {\n      colKeys.map(c => headerRow.push(c.join('-')));\n    }\n\n    const result = rowKeys.map(r => {\n      const row = r.map(x => x);\n      colKeys.map(c => {\n        const v = pivotData.getAggregator(r, c).value();\n        row.push(v ? v : '');\n      });\n      return row;\n    });\n\n    result.unshift(headerRow);\n\n    return (\n      <textarea\n        value={result.map(r => r.join('\\t')).join('\\n')}\n        style={{ width: window.innerWidth / 2, height: window.innerHeight / 2 }}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\nTSVExportRenderer.propTypes = PivotData.propTypes;\n\nexport default {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({ heatmapMode: 'full' }),\n  'Table Col Heatmap': makeRenderer({ heatmapMode: 'col' }),\n  'Table Row Heatmap': makeRenderer({ heatmapMode: 'row' }),\n  'Exportable TSV': TSVExportRenderer,\n};\n"]}